1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]
temp = my_list[6]
my_list[6] = my_list[7]
my_list[7] = temp
print(my_list)

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]
temp = my_list[0]
my_list[0] = my_list[3]
my_list[3] = temp
print(my_list)

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

- This code will not work because the results of this code would put 70 in the
first and second place when you actually want to switch the first two numbers
(70 & 32). What the code should look like is:
my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[0] = my_list[1]
my_list[1] = temp
print(my_list)
because you want to be able to switch the first two numbers. So you need to have
the first line that copies the value of position 0 into the temp variable.
This then allows the code to write over position 0 with the value in position 1
without data being lost.
The final line takes the old value of position 0, currently held in the temp
variable, and places it in position 1.
Then at the end of the code you will need to add print(my_list) so can see if
it actually worked.


4. Show how the following numbers can be sorted using the selection sort.
Show the numbers after each iteration of the outer loop, similar to what is shown in the book.
I am NOT looking for a copy of the code to do the sort.
If you include any code for problems 4-7 you are doing it wrong.

97   74   8   98   47   62   12   11   0   60
0    74   8   98   47   62   12   11   97  60
0    8    74  98   47   62   12   11   97  60
0    8    11  98   47   62   12   74   97  60
0    8    11  12   47   62   98   74   97  60
0    8    11  12   47   62   98   74   97  60
0    8    11  12   47   60   98   74   97  62
0    8    11  12   47   60   62   74   97  98
0    8    11  12   47   60   62   74   97  98
0    8    11  12   47   60   62   74   97  98
0    8    11  12   47   60   62   74   97  98


5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25
0    92   18   47   40   58   74   36   29   25
0    18   92   47   40   58   74   36   29   25
0    18   25   47   40   58   74   36   29   92
0    18   25   29   40   58   74   36   47   92
0    18   25   29   36   58   74   40   47   92
0    18   25   29   36   40   74   58   47   92
0    18   25   29   36   40   47   58   74   92
0    18   25   29   36   40   47   58   74   92
0    18   25   29   36   40   47   58   74   92
0    18   25   29   36   40   47   58   74   92



6. Show how the following numbers can be sorted using the INSERTION sort.
(Note: If you think the 0 gets immediately sorted into position, you are doing it wrong.
Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25
74   92   18   47   40   58    0   36   29   25
18   74   92   47   40   58    0   36   29   25
18   47   74   92   40   58    0   36   29   25
18   40   47   74   92   58    0   36   29   25
18   40   47   58   74   92    0   36   29   25
0   18   40   47   58   74    92   36   29   25
0   18   36   40   47   58    74   92   29   25
0   18   29   36   40   47    58   74   92   25
0   18   25   29   36   40    47   58   74   92
0   18   25   29   36   40    47   58   74   92

7. Show how the following numbers can be sorted using the insertion sort:

37   11   14   50   24    7   17   88   99    9
11   37   14   50   24    7   17   88   99    9
11   14   37   50   24    7   17   88   99    9
11   14   37   50   24    7   17   88   99    9
11   14   24   37   50    7   17   88   99    9
7   11   14   24   37    50   17   88   99    9
7   11   14   17   24    37   50   88   99    9
7   11   14   17   24    37   50   88   99    9
7   11   14   17   24    37   50   88   99    9
7   11   14   17   24    37   50   88   99    9
7   9   11   14   17    24   37   50   88    99

8. Explain what `min_pos` does in the selection sort.
- It holds the position of the smallest element on each scan.

9. Explain what `cur_pos` does in the selection sort.
- The current position that we are looking to swap the smallest element into.

10. Explain what `scan_pos` does in the selection sort.
-   The scan position is where we are currently looking to find the small element as we scan the
    array for it.

11. Explain what `key_pos` and `key_value` are in the insertion sort.
-   KeyPos is position of the new element we are looking to insert into the list.
    KeyValue is the value of that element.

12. Explain `scan_pos` in the insertion sort.
- It holds where we scan right to left, floating value up until we reach a value that is
  less than the keyValue.

13. Look at the example sort program at the very end of this chapter:

import random


def selection_sort(my_list):
    """ Sort a list using the selection sort """

    outsideloop = 0
    insideloop = 0

    # Loop through the entire array
    for cur_pos in range(len(my_list)):
        outsideloop = outsideloop + 1
        # Find the position that has the smallest number
        # Start with the current position
        min_pos = cur_pos

        # Scan left to right (end of the list)
        for scan_pos in range(cur_pos + 1, len(my_list)):
            insideloop = insideloop + 1
            # Is this position smallest?
            if my_list[scan_pos] < my_list[min_pos]:
                # It is, mark this position as the smallest
                min_pos = scan_pos

        # Swap the two values
        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp

    print(outsideloop, insideloop)

def insertion_sort(my_list):
    """ Sort a list using the insertion sort """

    outsideloop = 0
    insideloop = 0

    # Start at the second element (pos 1).
    # Use this element to insert into the
    # list.
    for key_pos in range(1, len(my_list)):
        outsideloop = outsideloop + 1

        # Get the value of the element to insert
        key_value = my_list[key_pos]

        # Scan from right to the left (start of list)
        scan_pos = key_pos - 1

        # Loop each element, moving them up until
        # we reach the position the
        while (scan_pos >= 0) and (my_list[scan_pos] > key_value):
            insideloop = insideloop + 1
            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1

        # Everything's been moved out of the way, insert
        # the key into the correct location
        my_list[scan_pos + 1] = key_value

    print(outsideloop, insideloop)


# This will point out a list
# For more information on the print formatting {:3}
# see the chapter on print formatting.
def print_list(my_list):
    for item in my_list:
        print(f"{item:3}", end="")
    print()


def main():
    # Create two lists of the same random numbers
    list_for_selection_sort = []
    list_for_insertion_sort = []
    list_size = 100
    for i in range(list_size):
        new_number = random.randrange(100)
        list_for_selection_sort.append(new_number)
        list_for_insertion_sort.append(new_number)

    # Print the original list
    print("Original List")
    print_list(list_for_selection_sort)

    # Use the selection sort and print the result
    print("Selection Sort")
    selection_sort(list_for_selection_sort)
    print_list(list_for_selection_sort)

    # Use the insertion sort and print the result
    print("Insertion Sort")
    insertion_sort(list_for_insertion_sort)
    print_list(list_for_insertion_sort)


main()

results:
Original List
 84 45 38 81 53 35 87 48  3 35 70 22 44 88 10 46 19 22 88 65 97 94 50 52 56  4 90 34 32 74 73 74  0 20 48 70 59 66  0 63 97 88 31 43  0 32 22 28 88  3 35 61 25  5 86 26 11  7  9 16 68 98 67  4 85 59 20  2 30 18  1 53 32 52 63 37 52 24 87 46 13 36  8 79 23  9  6  9 35  4 33 19 94 33 56 71 33 71  7 88
Selection Sort
100 4950
  0  0  0  1  2  3  3  4  4  4  5  6  7  7  8  9  9  9 10 11 13 16 18 19 19 20 20 22 22 22 23 24 25 26 28 30 31 32 32 32 33 33 33 34 35 35 35 35 36 37 38 43 44 45 46 46 48 48 50 52 52 52 53 53 56 56 59 59 61 63 63 65 66 67 68 70 70 71 71 73 74 74 79 81 84 85 86 87 87 88 88 88 88 88 90 94 94 97 97 98
Insertion Sort
99 2744
  0  0  0  1  2  3  3  4  4  4  5  6  7  7  8  9  9  9 10 11 13 16 18 19 19 20 20 22 22 22 23 24 25 26 28 30 31 32 32 32 33 33 33 34 35 35 35 35 36 37 38 43 44 45 46 46 48 48 50 52 52 52 53 53 56 56 59 59 61 63 63 65 66 67 68 70 70 71 71 73 74 74 79 81 84 85 86 87 87 88 88 88 88 88 90 94 94 97 97 98


https://learn.arcade.academy/en/latest/chapters/30_sorting/sorting.html

Modify the sorts to print the number of times the inside loop is run,
and the number of times the outside loop is run.
Modify the program to work with a list of 100. Paste the code you used here.
Run the program and list the numbers you got here. (DON'T FORGET TO INCLUDE THE RESULTS!)
Inside loop for selection sort should be about 5,000, and insertion sort 2,500.
Double-check if you don't get numbers close to these.

To turn in: Upload your .txt file. Just drag it from PyCharm to the upload for the assignment.
(BUT WAIT! Make sure you include the results from #13, and not just the program.)

Alternatively, turn in a link to the github for the worksheet.

